"""Root of queries"""
type Query {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Fetches objects given their IDs"""
  nodes(
    """The IDs of objects"""
    ids: [ID!]!
  ): [Node]!
  me: User
  version: String!
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type User implements Node {
  """The ID of an object"""
  id: ID!
  username: String!
  displayName: String
  email: String!
  communities(after: String, first: Int, before: String, last: Int): CommunityConnectioonConnection!
}

"""A connection to a list of items."""
type CommunityConnectioonConnection implements Connection {
  """Number of items in this connection."""
  count: Int

  """
  A count of the total number of objects in this connection, ignoring pagination.
  This allows a client to fetch the first five objects by passing "5" as the
  argument to "first", then fetch the total count so it could display "5 of 83",
  for example.
  """
  totalCount: Int

  """Offset from start."""
  startCursorOffset: Int!

  """Offset till end."""
  endCursorOffset: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CommunityConnectioonEdge]!
}

"""A connection to a list of items."""
interface Connection {
  """Number of items in this connection."""
  count: Int

  """
  A count of the total number of objects in this connection, ignoring pagination.
  This allows a client to fetch the first five objects by passing "5" as the
  argument to "first", then fetch the total count so it could display "5 of 83",
  for example.
  """
  totalCount: Int

  """Offset from start."""
  startCursorOffset: Int!

  """Offset till end."""
  endCursorOffset: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An edge in a connection."""
type CommunityConnectioonEdge {
  """The item at the end of the edge."""
  node: Community

  """A cursor for use in pagination."""
  cursor: String!
}

type Community implements Node {
  """The ID of an object"""
  id: ID!

  """The slugged name of the community - this is unique"""
  name: String!

  """Some custom name that doens't necessary be the name of the community"""
  displayName: String!
  admin: ID!
  mods: [ID]!

  """
  A list containing the IDs of all users that is member of this community
  """
  members(after: String, first: Int, before: String, last: Int): UserConnectionConnection!
}

"""A connection to a list of items."""
type UserConnectionConnection implements Connection {
  """Number of items in this connection."""
  count: Int

  """
  A count of the total number of objects in this connection, ignoring pagination.
  This allows a client to fetch the first five objects by passing "5" as the
  argument to "first", then fetch the total count so it could display "5 of 83",
  for example.
  """
  totalCount: Int

  """Offset from start."""
  startCursorOffset: Int!

  """Offset till end."""
  endCursorOffset: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserConnectionEdge]!
}

"""An edge in a connection."""
type UserConnectionEdge {
  """The item at the end of the edge."""
  node: User

  """A cursor for use in pagination."""
  cursor: String!
}

"""Root of mutations"""
type Mutation {
  userRegisterMutation(input: UserRegisterInput!): UserRegisterPayload
  userLoginMutation(input: UserLoginInput!): UserLoginPayload
  communityCreate(input: CommunityCreateInput!): CommunityCreatePayload
  communityJoin(input: CommunityJoinInput!): CommunityJoinPayload
  communityExit(input: CommunityExitInput!): CommunityExitPayload
  communityExitAsAdmin(input: CommunityExitAsAdminInput!): CommunityExitAsAdminPayload
}

type UserRegisterPayload {
  token: String
  me: User
  clientMutationId: String
}

input UserRegisterInput {
  username: String!
  displayName: String
  email: String!
  password: String!
  clientMutationId: String
}

type UserLoginPayload {
  token: String
  me: User
  clientMutationId: String
}

input UserLoginInput {
  username: String!
  password: String!
  clientMutationId: String
}

type CommunityCreatePayload {
  community: Community
  clientMutationId: String
}

input CommunityCreateInput {
  communityId: String!
  displayName: String!
  clientMutationId: String
}

type CommunityJoinPayload {
  community: Community
  clientMutationId: String
}

input CommunityJoinInput {
  communityId: String!
  clientMutationId: String
}

type CommunityExitPayload {
  community: Community
  clientMutationId: String
}

input CommunityExitInput {
  communityName: String!
  clientMutationId: String
}

type CommunityExitAsAdminPayload {
  community: Community
  clientMutationId: String
}

input CommunityExitAsAdminInput {
  communityName: String!
  clientMutationId: String
}
